name: Build new image

on:
  workflow_dispatch:

  workflow_call:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: ${{ github.ref_name }}
        type: string
      is_scheduled:
        description: 'Is this a scheduled build?'
        required: false
        default: false
        type: boolean

env:
  cidata: .ci
  appname: remote-debian-base
  dockerfile: Dockerfile

jobs:

  setup:

    name: Setup workflow

    runs-on: ubuntu-latest

    outputs:
      last_version: ${{ steps.last_versions.outputs.last_version }}
      last_hash: ${{ steps.last_versions.outputs.last_hash }}

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ inputs.branch }}

    - name: Determine last version details
      id: last_versions
      run: |
        last_version=$(cat ${{ env.cidata }}/release_version.txt)
        last_hash=$(cat ${{ env.cidata }}/release_hash.txt)
        echo "last_version=$last_version" >> "$GITHUB_OUTPUT"
        echo "last_hash=$last_hash" >> "$GITHUB_OUTPUT"

  version:
    name: Determine new version string
    needs: setup
    uses: TLii/workflows/.github/workflows/versioning.yml@master
    if: ${{ inputs.is_scheduled == 'false' }}
    with:
      last_build_head: ${{ needs.setup.outputs.last_hash }}
      current_version: ${{ needs.setup.outputs.last_version }}
      use_build_numbers: false

  build:
    name: Build and push container image

    runs-on: ubuntu-latest

    needs: [setup, version]

    steps:

    - name: Code checkout
      uses: actions/checkout@v3

    - name: Determine tags
      run: |

        new_version=${{ steps.release.outputs.new_version }}
        branch=${{ inputs.branch }}
        is_scheduled=${{ inputs.is_scheduled }}

        tags="$branch-latest, $branch, $new_version, ${{ env.github_hash }}, ${{ github.sha }}

        if [[ ${{ env.branch }} == 'master' ]]); then
          tags+="latest"
          addlatest="true"
        else
          addlatest="false"
        fi
        echo "tags=$(echo "$tags"|sed 's/[, ]*$//g')" >> "$GITHUB_ENV"
        echo "addlatest=$addlatest" >> "$GITHUB_ENV"

    - name: Build and push container image
      uses: mr-smithers-excellent/docker-build-push@v6.2
      with:
        image: remote-ide/${{ env.appname }}
        tags: ${{ env.tags }}
        registry: ${{ secrets.REGISTRY_URL }}
        dockerfile: ${{ env.dockerfile }}
        username: ${{ secrets.REGISTRY_USER }} # optional
        password: ${{ secrets.REGISTRY_PASSWORD }} # optional
        addLatest: ${{ env.addlatest }}

    - name: Record new version
      if: ${{ inputs.is_scheduled == 'false' }}
      run: |
        echo "${{ steps.new_version.outputs.new_version }}" > ${{ env.cidata }}/release_version.txt
        echo "${{ github.sha }}" > ${{ env.cidata }}/release_hash.txt

    - name: Build Changelog
      uses: TriPSs/conventional-changelog-action@v3
      if: ${{ inputs.is_scheduled == 'false' }}
      id: changelog
      with:
        github-token: ${{ secrets.github_token }}
        preset: conventionalcommits
        git-user-name: github-actions
        git-push: false
        git-message: 'chore: update changelog'
        git-branch: ${{ inputs.branch }}
        output-file: CHANGELOG.md
        release-count: 0
        skip-version-file: true
        skip-commit: true
        skip-tag: true


    - name: Commit changed version number and changed ci values
      if: ${{ inputs.is_scheduled == 'false' }}
      id: commit
      run: |
        git config --local user.email "github-actions@github.com"
        git config --local user.name "github-actions"
        git add .
        if [[ -z "$(git status --porcelain)" ]]; then
          # If no files were changed, there's nothing to push.
          echo "push_needed=false" >> "$GITHUB_OUTPUT"
        else
          # If files were changed, record the change.
          git commit -m "chore: Automatic version update" -a
          echo "push_needed=true" >> "$GITHUB_OUTPUT"
        fi
      shell: bash

    - name: Push changed version commit
      if: ${{ steps.commit.outputs.push_needed == 'true' }} && ${{ inputs.is_scheduled == 'false' }}
      id: push
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      if: ${{ steps.commit.outputs.push_needed == 'true' }} && ${{ inputs.is_scheduled == 'false' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.version.outputs.new_version }}
        release_name: v${{ needs.version.outputs.new_version }}
        body: ${{ steps.changelog.outputs.changelog }}xยง
        draft: false
        prerelease: false